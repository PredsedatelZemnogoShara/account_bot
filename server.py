"""–°–µ—Ä–≤–µ—Ä Telegram –±–æ—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ"""
import asyncio
import logging
import time

from aiogram import executor

#import poster_storage
from pkg import dp
from product_storage import CategoriesTree
from db_modules.db import DataBase
from handlers.priority_handlers import chr
from handlers.admin.handlers import UserStates
from handlers.expenses.handlers import save_message
from handlers.barmen.handlers import get_keyboard
from handlers.cook.handlers import show_shipment


db = DataBase()


expenses_ = '‚öôÔ∏è –í–Ω–æ—Å–∏—Ç—å —Ç—Ä–∞—Ç—ã'
shipments_ = 'üöö –í–Ω–æ—Å–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫–∏'
other = '‚ùì –í–æ–ø—Ä–æ—Å—ã'


logging.basicConfig(level=logging.INFO)


# @dp.message_handler(lambda message: message.text.startswith('/del'))
# async def del_expense(message: types.Message):
#     """–£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
#     row_id = int(message.text[4:])
#     expenses.delete_expense(row_id)
#     answer_message = "–£–¥–∞–ª–∏–ª"
#     await message.answer(answer_message)


# @dp.message_handler(commands=['categories'])
# async def categories_list(message: types.Message):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤"""
#     categories = categories_module.get_all_categories()
#     answer_message = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:\n\n* " +\
#             ("\n* ".join([c.name+' ('+", ".join(c.aliases)+')' for c in categories]))
#     await message.answer(answer_message)


# @dp.message_handler(IsAdmin(), commands=['due__'])
# async def delete_user_expenses(message: types.Message):
#     e = expenses.get_month_expenses()
#     e = expenses.expenses_by_user(e, message.from_user.id)
#     expenses.delete_expenses(e)


#
# @dp.message_handler(commands=['expenses'])
# async def list_expenses(message: types.Message):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
#     ebc = expenses.expenses_by_categories()
#     if not ebc:
#         await message.answer("–†–∞—Å—Ö–æ–¥—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã")
#         return
#
#     last_expenses_rows = [
#         f"{i[0]}: {i[1]} –ª–∞—Ä–∏\n"
#         for i in ebc.items()]
#     answer_message = "–í—Å–µ —Ç—Ä–∞—Ç—ã:\n\n* " + "\n\n* "\
#             .join(last_expenses_rows)
#     await message.answer(answer_message)


# @dp.message_handler(commands=['expenses'])
# async def list_expenses(message: types.Message):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
#     et = expenses.ExpenseTable()
#     et.update()
#     last_expenses = expenses.last()
#     if not last_expenses:
#         await message.answer("–†–∞—Å—Ö–æ–¥—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã")
#         return
#
#     last_expenses_rows = [
#         f"{expense.amount} —Ä—É–±. –Ω–∞ {expense.product_alias} ‚Äî –Ω–∞–∂–º–∏ "
#         f"/del{expense.id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
#         for expense in last_expenses]
#     answer_message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç—Ä–∞—Ç—ã:\n\n* " + "\n\n* "\
#             .join(last_expenses_rows)
#     await message.answer(answer_message)


def pre_initialize():
    tree = CategoriesTree()
    cursor = db.cursor
    # cursor.execute("select id, name, measurement_unit, quantity from product_storage")
    cursor.execute(
        "select target, category from category_links")
    rows = cursor.fetchall()
    tree.build_tree(rows)


def start_polling():
    try:
        executor.start_polling(dp, skip_updates=True)
    except:
        logging.warning("Trying to reconnect")
        time.sleep(5)
        start_polling()


import os


if __name__ == '__main__':
    #ps = poster_storage.PosterStorage()
    #asyncio.run(ps.async_init())
    #pre_initialize()
    start_polling()
    #os.remove("/home/rzhenev/personal/account_bot/db/finance.db")
    print(1)